package query

// Code generated by peg query.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulecondition
	ruletag
	rulevalue
	rulenumber
	ruledigit
	ruletime
	ruledate
	ruleyear
	rulemonth
	ruleday
	ruleand
	ruleequal
	rulecontains
	ruleexists
	rulele
	rulege
	rulel
	ruleg
	rulePegText
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"condition",
	"tag",
	"value",
	"number",
	"digit",
	"time",
	"date",
	"year",
	"month",
	"day",
	"and",
	"equal",
	"contains",
	"exists",
	"le",
	"ge",
	"l",
	"g",
	"PegText",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryParser struct {
	Buffer string
	buffer []rune
	rules  [21]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryParser) Init(options ...func(*QueryParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <('"' condition (' '+ and ' '+ condition)* '"' !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if buffer[position] != rune('"') {
					goto l0
				}
				position++
				if !_rules[rulecondition]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l3
					}
					position++
				l4:
					{
						position5, tokenIndex5 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l5
						}
						position++
						goto l4
					l5:
						position, tokenIndex = position5, tokenIndex5
					}
					if !_rules[ruleand]() {
						goto l3
					}
					if buffer[position] != rune(' ') {
						goto l3
					}
					position++
				l6:
					{
						position7, tokenIndex7 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l7
						}
						position++
						goto l6
					l7:
						position, tokenIndex = position7, tokenIndex7
					}
					if !_rules[rulecondition]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if buffer[position] != rune('"') {
					goto l0
				}
				position++
				{
					position8, tokenIndex8 := position, tokenIndex
					if !matchDot() {
						goto l8
					}
					goto l0
				l8:
					position, tokenIndex = position8, tokenIndex8
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 condition <- <(tag ' '* ((le ' '* (number / time / date)) / (ge ' '* (number / time / date)) / (l ' '* (number / time / date)) / (g ' '* (number / time / date)) / (equal ' '* (number / time / date / value)) / (contains ' '* value) / exists))> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				if !_rules[ruletag]() {
					goto l9
				}
			l11:
				{
					position12, tokenIndex12 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l12
					}
					position++
					goto l11
				l12:
					position, tokenIndex = position12, tokenIndex12
				}
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[rulele]() {
						goto l14
					}
				l15:
					{
						position16, tokenIndex16 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l16
						}
						position++
						goto l15
					l16:
						position, tokenIndex = position16, tokenIndex16
					}
					{
						position17, tokenIndex17 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l18
						}
						goto l17
					l18:
						position, tokenIndex = position17, tokenIndex17
						if !_rules[ruletime]() {
							goto l19
						}
						goto l17
					l19:
						position, tokenIndex = position17, tokenIndex17
						if !_rules[ruledate]() {
							goto l14
						}
					}
				l17:
					goto l13
				l14:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulege]() {
						goto l20
					}
				l21:
					{
						position22, tokenIndex22 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l22
						}
						position++
						goto l21
					l22:
						position, tokenIndex = position22, tokenIndex22
					}
					{
						position23, tokenIndex23 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l24
						}
						goto l23
					l24:
						position, tokenIndex = position23, tokenIndex23
						if !_rules[ruletime]() {
							goto l25
						}
						goto l23
					l25:
						position, tokenIndex = position23, tokenIndex23
						if !_rules[ruledate]() {
							goto l20
						}
					}
				l23:
					goto l13
				l20:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulel]() {
						goto l26
					}
				l27:
					{
						position28, tokenIndex28 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l28
						}
						position++
						goto l27
					l28:
						position, tokenIndex = position28, tokenIndex28
					}
					{
						position29, tokenIndex29 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l30
						}
						goto l29
					l30:
						position, tokenIndex = position29, tokenIndex29
						if !_rules[ruletime]() {
							goto l31
						}
						goto l29
					l31:
						position, tokenIndex = position29, tokenIndex29
						if !_rules[ruledate]() {
							goto l26
						}
					}
				l29:
					goto l13
				l26:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[ruleg]() {
						goto l32
					}
				l33:
					{
						position34, tokenIndex34 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l34
						}
						position++
						goto l33
					l34:
						position, tokenIndex = position34, tokenIndex34
					}
					{
						position35, tokenIndex35 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l36
						}
						goto l35
					l36:
						position, tokenIndex = position35, tokenIndex35
						if !_rules[ruletime]() {
							goto l37
						}
						goto l35
					l37:
						position, tokenIndex = position35, tokenIndex35
						if !_rules[ruledate]() {
							goto l32
						}
					}
				l35:
					goto l13
				l32:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[ruleequal]() {
						goto l38
					}
				l39:
					{
						position40, tokenIndex40 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l40
						}
						position++
						goto l39
					l40:
						position, tokenIndex = position40, tokenIndex40
					}
					{
						position41, tokenIndex41 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l42
						}
						goto l41
					l42:
						position, tokenIndex = position41, tokenIndex41
						if !_rules[ruletime]() {
							goto l43
						}
						goto l41
					l43:
						position, tokenIndex = position41, tokenIndex41
						if !_rules[ruledate]() {
							goto l44
						}
						goto l41
					l44:
						position, tokenIndex = position41, tokenIndex41
						if !_rules[rulevalue]() {
							goto l38
						}
					}
				l41:
					goto l13
				l38:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulecontains]() {
						goto l45
					}
				l46:
					{
						position47, tokenIndex47 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l47
						}
						position++
						goto l46
					l47:
						position, tokenIndex = position47, tokenIndex47
					}
					if !_rules[rulevalue]() {
						goto l45
					}
					goto l13
				l45:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[ruleexists]() {
						goto l9
					}
				}
			l13:
				add(rulecondition, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 2 tag <- <<(!(' ' / '\t' / '\n' / '\r' / '\\' / '(' / ')' / '"' / '\'' / '=' / '>' / '<') .)+>> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				{
					position50 := position
					{
						position53, tokenIndex53 := position, tokenIndex
						{
							position54, tokenIndex54 := position, tokenIndex
							if buffer[position] != rune(' ') {
								goto l55
							}
							position++
							goto l54
						l55:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('\t') {
								goto l56
							}
							position++
							goto l54
						l56:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('\n') {
								goto l57
							}
							position++
							goto l54
						l57:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('\r') {
								goto l58
							}
							position++
							goto l54
						l58:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('\\') {
								goto l59
							}
							position++
							goto l54
						l59:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('(') {
								goto l60
							}
							position++
							goto l54
						l60:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune(')') {
								goto l61
							}
							position++
							goto l54
						l61:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('"') {
								goto l62
							}
							position++
							goto l54
						l62:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('\'') {
								goto l63
							}
							position++
							goto l54
						l63:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('=') {
								goto l64
							}
							position++
							goto l54
						l64:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('>') {
								goto l65
							}
							position++
							goto l54
						l65:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('<') {
								goto l53
							}
							position++
						}
					l54:
						goto l48
					l53:
						position, tokenIndex = position53, tokenIndex53
					}
					if !matchDot() {
						goto l48
					}
				l51:
					{
						position52, tokenIndex52 := position, tokenIndex
						{
							position66, tokenIndex66 := position, tokenIndex
							{
								position67, tokenIndex67 := position, tokenIndex
								if buffer[position] != rune(' ') {
									goto l68
								}
								position++
								goto l67
							l68:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('\t') {
									goto l69
								}
								position++
								goto l67
							l69:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('\n') {
									goto l70
								}
								position++
								goto l67
							l70:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('\r') {
									goto l71
								}
								position++
								goto l67
							l71:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('\\') {
									goto l72
								}
								position++
								goto l67
							l72:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('(') {
									goto l73
								}
								position++
								goto l67
							l73:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune(')') {
									goto l74
								}
								position++
								goto l67
							l74:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('"') {
									goto l75
								}
								position++
								goto l67
							l75:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('\'') {
									goto l76
								}
								position++
								goto l67
							l76:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('=') {
									goto l77
								}
								position++
								goto l67
							l77:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('>') {
									goto l78
								}
								position++
								goto l67
							l78:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('<') {
									goto l66
								}
								position++
							}
						l67:
							goto l52
						l66:
							position, tokenIndex = position66, tokenIndex66
						}
						if !matchDot() {
							goto l52
						}
						goto l51
					l52:
						position, tokenIndex = position52, tokenIndex52
					}
					add(rulePegText, position50)
				}
				add(ruletag, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 3 value <- <<('\'' (!('"' / '\'') .)* '\'')>> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81 := position
					if buffer[position] != rune('\'') {
						goto l79
					}
					position++
				l82:
					{
						position83, tokenIndex83 := position, tokenIndex
						{
							position84, tokenIndex84 := position, tokenIndex
							{
								position85, tokenIndex85 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l86
								}
								position++
								goto l85
							l86:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('\'') {
									goto l84
								}
								position++
							}
						l85:
							goto l83
						l84:
							position, tokenIndex = position84, tokenIndex84
						}
						if !matchDot() {
							goto l83
						}
						goto l82
					l83:
						position, tokenIndex = position83, tokenIndex83
					}
					if buffer[position] != rune('\'') {
						goto l79
					}
					position++
					add(rulePegText, position81)
				}
				add(rulevalue, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 4 number <- <<('0' / ([1-9] digit* ('.' digit*)?))>> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				{
					position89 := position
					{
						position90, tokenIndex90 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l91
						}
						position++
						goto l90
					l91:
						position, tokenIndex = position90, tokenIndex90
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l87
						}
						position++
					l92:
						{
							position93, tokenIndex93 := position, tokenIndex
							if !_rules[ruledigit]() {
								goto l93
							}
							goto l92
						l93:
							position, tokenIndex = position93, tokenIndex93
						}
						{
							position94, tokenIndex94 := position, tokenIndex
							if buffer[position] != rune('.') {
								goto l94
							}
							position++
						l96:
							{
								position97, tokenIndex97 := position, tokenIndex
								if !_rules[ruledigit]() {
									goto l97
								}
								goto l96
							l97:
								position, tokenIndex = position97, tokenIndex97
							}
							goto l95
						l94:
							position, tokenIndex = position94, tokenIndex94
						}
					l95:
					}
				l90:
					add(rulePegText, position89)
				}
				add(rulenumber, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 5 digit <- <[0-9]> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l98
				}
				position++
				add(ruledigit, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 6 time <- <(('t' / 'T') ('i' / 'I') ('m' / 'M') ('e' / 'E') ' ' <(year '-' month '-' day 'T' digit digit ':' digit digit ':' digit digit ((('-' / '+') digit digit ':' digit digit) / 'Z'))>)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l103
					}
					position++
					goto l102
				l103:
					position, tokenIndex = position102, tokenIndex102
					if buffer[position] != rune('T') {
						goto l100
					}
					position++
				}
			l102:
				{
					position104, tokenIndex104 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l105
					}
					position++
					goto l104
				l105:
					position, tokenIndex = position104, tokenIndex104
					if buffer[position] != rune('I') {
						goto l100
					}
					position++
				}
			l104:
				{
					position106, tokenIndex106 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l107
					}
					position++
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune('M') {
						goto l100
					}
					position++
				}
			l106:
				{
					position108, tokenIndex108 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l109
					}
					position++
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('E') {
						goto l100
					}
					position++
				}
			l108:
				if buffer[position] != rune(' ') {
					goto l100
				}
				position++
				{
					position110 := position
					if !_rules[ruleyear]() {
						goto l100
					}
					if buffer[position] != rune('-') {
						goto l100
					}
					position++
					if !_rules[rulemonth]() {
						goto l100
					}
					if buffer[position] != rune('-') {
						goto l100
					}
					position++
					if !_rules[ruleday]() {
						goto l100
					}
					if buffer[position] != rune('T') {
						goto l100
					}
					position++
					if !_rules[ruledigit]() {
						goto l100
					}
					if !_rules[ruledigit]() {
						goto l100
					}
					if buffer[position] != rune(':') {
						goto l100
					}
					position++
					if !_rules[ruledigit]() {
						goto l100
					}
					if !_rules[ruledigit]() {
						goto l100
					}
					if buffer[position] != rune(':') {
						goto l100
					}
					position++
					if !_rules[ruledigit]() {
						goto l100
					}
					if !_rules[ruledigit]() {
						goto l100
					}
					{
						position111, tokenIndex111 := position, tokenIndex
						{
							position113, tokenIndex113 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l114
							}
							position++
							goto l113
						l114:
							position, tokenIndex = position113, tokenIndex113
							if buffer[position] != rune('+') {
								goto l112
							}
							position++
						}
					l113:
						if !_rules[ruledigit]() {
							goto l112
						}
						if !_rules[ruledigit]() {
							goto l112
						}
						if buffer[position] != rune(':') {
							goto l112
						}
						position++
						if !_rules[ruledigit]() {
							goto l112
						}
						if !_rules[ruledigit]() {
							goto l112
						}
						goto l111
					l112:
						position, tokenIndex = position111, tokenIndex111
						if buffer[position] != rune('Z') {
							goto l100
						}
						position++
					}
				l111:
					add(rulePegText, position110)
				}
				add(ruletime, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 7 date <- <(('d' / 'D') ('a' / 'A') ('t' / 'T') ('e' / 'E') ' ' <(year '-' month '-' day)>)> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				{
					position117, tokenIndex117 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l118
					}
					position++
					goto l117
				l118:
					position, tokenIndex = position117, tokenIndex117
					if buffer[position] != rune('D') {
						goto l115
					}
					position++
				}
			l117:
				{
					position119, tokenIndex119 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l120
					}
					position++
					goto l119
				l120:
					position, tokenIndex = position119, tokenIndex119
					if buffer[position] != rune('A') {
						goto l115
					}
					position++
				}
			l119:
				{
					position121, tokenIndex121 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l122
					}
					position++
					goto l121
				l122:
					position, tokenIndex = position121, tokenIndex121
					if buffer[position] != rune('T') {
						goto l115
					}
					position++
				}
			l121:
				{
					position123, tokenIndex123 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l124
					}
					position++
					goto l123
				l124:
					position, tokenIndex = position123, tokenIndex123
					if buffer[position] != rune('E') {
						goto l115
					}
					position++
				}
			l123:
				if buffer[position] != rune(' ') {
					goto l115
				}
				position++
				{
					position125 := position
					if !_rules[ruleyear]() {
						goto l115
					}
					if buffer[position] != rune('-') {
						goto l115
					}
					position++
					if !_rules[rulemonth]() {
						goto l115
					}
					if buffer[position] != rune('-') {
						goto l115
					}
					position++
					if !_rules[ruleday]() {
						goto l115
					}
					add(rulePegText, position125)
				}
				add(ruledate, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 8 year <- <(('1' / '2') digit digit digit)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l129
					}
					position++
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					if buffer[position] != rune('2') {
						goto l126
					}
					position++
				}
			l128:
				if !_rules[ruledigit]() {
					goto l126
				}
				if !_rules[ruledigit]() {
					goto l126
				}
				if !_rules[ruledigit]() {
					goto l126
				}
				add(ruleyear, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 9 month <- <(('0' / '1') digit)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				{
					position132, tokenIndex132 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l133
					}
					position++
					goto l132
				l133:
					position, tokenIndex = position132, tokenIndex132
					if buffer[position] != rune('1') {
						goto l130
					}
					position++
				}
			l132:
				if !_rules[ruledigit]() {
					goto l130
				}
				add(rulemonth, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 10 day <- <(('0' / '1' / '2' / '3') digit)> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				{
					position136, tokenIndex136 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l137
					}
					position++
					goto l136
				l137:
					position, tokenIndex = position136, tokenIndex136
					if buffer[position] != rune('1') {
						goto l138
					}
					position++
					goto l136
				l138:
					position, tokenIndex = position136, tokenIndex136
					if buffer[position] != rune('2') {
						goto l139
					}
					position++
					goto l136
				l139:
					position, tokenIndex = position136, tokenIndex136
					if buffer[position] != rune('3') {
						goto l134
					}
					position++
				}
			l136:
				if !_rules[ruledigit]() {
					goto l134
				}
				add(ruleday, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 11 and <- <(('a' / 'A') ('n' / 'N') ('d' / 'D'))> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				{
					position142, tokenIndex142 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l143
					}
					position++
					goto l142
				l143:
					position, tokenIndex = position142, tokenIndex142
					if buffer[position] != rune('A') {
						goto l140
					}
					position++
				}
			l142:
				{
					position144, tokenIndex144 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l145
					}
					position++
					goto l144
				l145:
					position, tokenIndex = position144, tokenIndex144
					if buffer[position] != rune('N') {
						goto l140
					}
					position++
				}
			l144:
				{
					position146, tokenIndex146 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l147
					}
					position++
					goto l146
				l147:
					position, tokenIndex = position146, tokenIndex146
					if buffer[position] != rune('D') {
						goto l140
					}
					position++
				}
			l146:
				add(ruleand, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 12 equal <- <'='> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				if buffer[position] != rune('=') {
					goto l148
				}
				position++
				add(ruleequal, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 13 contains <- <(('c' / 'C') ('o' / 'O') ('n' / 'N') ('t' / 'T') ('a' / 'A') ('i' / 'I') ('n' / 'N') ('s' / 'S'))> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position152, tokenIndex152 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l153
					}
					position++
					goto l152
				l153:
					position, tokenIndex = position152, tokenIndex152
					if buffer[position] != rune('C') {
						goto l150
					}
					position++
				}
			l152:
				{
					position154, tokenIndex154 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l155
					}
					position++
					goto l154
				l155:
					position, tokenIndex = position154, tokenIndex154
					if buffer[position] != rune('O') {
						goto l150
					}
					position++
				}
			l154:
				{
					position156, tokenIndex156 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l157
					}
					position++
					goto l156
				l157:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('N') {
						goto l150
					}
					position++
				}
			l156:
				{
					position158, tokenIndex158 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l159
					}
					position++
					goto l158
				l159:
					position, tokenIndex = position158, tokenIndex158
					if buffer[position] != rune('T') {
						goto l150
					}
					position++
				}
			l158:
				{
					position160, tokenIndex160 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l161
					}
					position++
					goto l160
				l161:
					position, tokenIndex = position160, tokenIndex160
					if buffer[position] != rune('A') {
						goto l150
					}
					position++
				}
			l160:
				{
					position162, tokenIndex162 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l163
					}
					position++
					goto l162
				l163:
					position, tokenIndex = position162, tokenIndex162
					if buffer[position] != rune('I') {
						goto l150
					}
					position++
				}
			l162:
				{
					position164, tokenIndex164 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l165
					}
					position++
					goto l164
				l165:
					position, tokenIndex = position164, tokenIndex164
					if buffer[position] != rune('N') {
						goto l150
					}
					position++
				}
			l164:
				{
					position166, tokenIndex166 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l167
					}
					position++
					goto l166
				l167:
					position, tokenIndex = position166, tokenIndex166
					if buffer[position] != rune('S') {
						goto l150
					}
					position++
				}
			l166:
				add(rulecontains, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 14 exists <- <(('e' / 'E') ('x' / 'X') ('i' / 'I') ('s' / 'S') ('t' / 'T') ('s' / 'S'))> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				{
					position170, tokenIndex170 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l171
					}
					position++
					goto l170
				l171:
					position, tokenIndex = position170, tokenIndex170
					if buffer[position] != rune('E') {
						goto l168
					}
					position++
				}
			l170:
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('x') {
						goto l173
					}
					position++
					goto l172
				l173:
					position, tokenIndex = position172, tokenIndex172
					if buffer[position] != rune('X') {
						goto l168
					}
					position++
				}
			l172:
				{
					position174, tokenIndex174 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l175
					}
					position++
					goto l174
				l175:
					position, tokenIndex = position174, tokenIndex174
					if buffer[position] != rune('I') {
						goto l168
					}
					position++
				}
			l174:
				{
					position176, tokenIndex176 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l177
					}
					position++
					goto l176
				l177:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('S') {
						goto l168
					}
					position++
				}
			l176:
				{
					position178, tokenIndex178 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l179
					}
					position++
					goto l178
				l179:
					position, tokenIndex = position178, tokenIndex178
					if buffer[position] != rune('T') {
						goto l168
					}
					position++
				}
			l178:
				{
					position180, tokenIndex180 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l181
					}
					position++
					goto l180
				l181:
					position, tokenIndex = position180, tokenIndex180
					if buffer[position] != rune('S') {
						goto l168
					}
					position++
				}
			l180:
				add(ruleexists, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 15 le <- <('<' '=')> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('<') {
					goto l182
				}
				position++
				if buffer[position] != rune('=') {
					goto l182
				}
				position++
				add(rulele, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 16 ge <- <('>' '=')> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune('>') {
					goto l184
				}
				position++
				if buffer[position] != rune('=') {
					goto l184
				}
				position++
				add(rulege, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 17 l <- <'<'> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('<') {
					goto l186
				}
				position++
				add(rulel, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 18 g <- <'>'> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('>') {
					goto l188
				}
				position++
				add(ruleg, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		nil,
	}
	p.rules = _rules
	return nil
}
